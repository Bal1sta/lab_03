# name: 'C++ CI on macOS'

# on:
#   push:
#     branches:
#       - main
#       - feature/github_actions

# jobs:
#   build:
#     runs-on: macos-latest
#     permissions:
#       contents: write

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           submodules: true

#       - name: Install dependencies
#         run: |
#           if ! command -v cmake &> /dev/null; then
#             brew install --formula cmake boost
#           else
#             echo "CMake is already installed."
#           fi

#       - name: Configure CMake
#         run: cmake . -DCMAKE_BUILD_TYPE=Release

#       - name: Build project
#         run: cmake --build .

#       - name: Run tests
#         run: ctest --output-on-failure

#       - name: Check existing tags
#         id: check_tags
#         run: |
#           if git tag -l | grep -q "${{ github.run_number }}"; then
#             echo "Tag already exists. Skipping release creation."
#             echo "::set-output name=release_exists::true"
#           else
#             echo "::set-output name=release_exists::false"
#           fi

#       - name: Create Release
#         id: create_release
#         if: steps.check_tags.outputs.release_exists == 'false'
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.run_number }}-${{ github.sha }}
#           release_name: Release ${{ github.run_number }}
#           draft: false
#           prerelease: false

#       - name: Upload Release Asset
#         id: upload-release-asset
#         if: steps.check_tags.outputs.release_exists == 'false'
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./MyExecutable   # Ensure this path is correct!
#           asset_name: MyExecutable       
#           asset_content_type: application/octet-stream  






# name: 'C++ CI'

# on:
#   push:
#     branches:
#       - main
#       - feature/github_actions

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write  # Необходимое разрешение для создания релиза

#     steps:
#       # Шаг 1: Проверка исходного кода
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           submodules: true

#       # Шаг 2: Установка зависимостей (например, Boost)
#       - name: Install dependencies
#         run: sudo apt-get update && sudo apt-get install libboost-test-dev cmake g++ -y

#       # Шаг 3: Генерация файлов сборки с помощью CMake
#       - name: Configure CMake
#         run: cmake . -DCMAKE_BUILD_TYPE=Release

#       # Шаг 4: Сборка проекта
#       - name: Build project
#         run: cmake --build .

#       # Шаг 5: Запуск тестов (если у вас есть тесты)
#       - name: Run tests
#         run: ctest --output-on-failure

#       # Шаг 6: Создание релиза на GitHub (если необходимо)
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.run_number }}   # Используйте номер сборки как тег
#           release_name: Release ${{ github.run_number }}
#           draft: false
#           prerelease: false

#       # Шаг 7: Загрузка артефактов релиза (например, исполняемый файл)
#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./MyExecutable   # Убедитесь, что путь правильный к вашему исполняемому файлу!
#           asset_name: MyExecutable       # Имя артефакта в релизе
#           asset_content_type: application/octet-stream  # Тип контента для исполняемого файла




name: 'C++ CI'

# Запускаем workflow при пуше в ветки lab1 или feature/github_actions
on: 
  # событие запускаем
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build_windows:
    runs-on: windows-latest # Запускается на Windows-latest
    permissions: write-all # Предоставляет права на запись всем ресурсам
    steps:
      - uses: actions/checkout@v3  # Клонирует репозиторий, включая подмодули
        with:
          submodules: true
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} # Конфигурирует проект с помощью CMake, используя номер запуска для PATCH_VERSION
       # Сборка проекта с помощью CMake 
      - run: cmake --build .
       # Создание пакета
      - run: cmake --build . --target package
      # Выводит список файлов в текущей директории
      - name: List files
        run: dir
      # Создает релиз для Windows
      - name: Create Release (windows)
        id: create_release_windows
        uses: actions/create-release@v1 # Использует действие для создания релиза 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Использует GITHUB_TOKEN для аутентификации
        with:
          # Устанавливает tag_name, release_name и другие параметры 
          tag_name: windows${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (windows)
          draft: false # Не публикует релиз как черновик 
          prerelease: false # Не публикует как предварительный релиз 
      # Загружает файл релиза для Windows 
      - name: Upload Release Asset (windows)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./laba3-0.0.${{ github.run_number }}-win64.zip
          asset_name: laba3-0.0.${{ github.run_number }}-win64.zip
          asset_content_type: application/zip
  
  build_ubuntu:
    # Запускаем job на ubuntu-latest
    runs-on: ubuntu-latest
    # Предоставляем разрешения на запись во все ресурсы
    permissions: write-all
    steps:
      # Клонируем репозиторий, включая submodules
      - uses: actions/checkout@v3
        with:
          submodules: true
      # Конфигурируем проект с помощью CMake, используя номер запуска для PATCH_VERSION
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      # Строим проект с помощью CMake
      - run: cmake --build .
      # Создаем пакет
      - run: cmake --build . --target package
      # Создаем релиз для Ubuntu
      - name: Create Release (Ubuntu)
        id: create_release_ubuntu
        # Используем action для создания релиза
        uses: actions/create-release@v1
        # Используем GITHUB_TOKEN для аутентификации
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Устанавливаем tag_name, release_name и другие параметры
        with:
          tag_name: v${{ github.run_number }} # Используем номер запуска для тега
          release_name: Release ${{ github.run_number }} (Ubuntu)
          draft: false # Не публикуем релиз в черновике
          prerelease: false # Не публикуем как предварительную версию
      # Загружаем релизный ассет для Ubuntu
      - name: Upload Release Asset (Ubuntu)
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_ubuntu.outputs.upload_url }}
          asset_path: ./laba3-0.0.${{ github.run_number }}-Linux.deb
          asset_name: laba3-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
          allowUpdates: true # Разрешаем обновление уже загруженного ассета


    