# name: 'C++ CI on macOS'

# on:
#   push:
#     branches:
#       - main
#       - feature/github_actions

# jobs:
#   build:
#     runs-on: macos-latest
#     permissions:
#       contents: write

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           submodules: true

#       - name: Install dependencies
#         run: |
#           if ! command -v cmake &> /dev/null; then
#             brew install --formula cmake boost
#           else
#             echo "CMake is already installed."
#           fi

#       - name: Configure CMake
#         run: cmake . -DCMAKE_BUILD_TYPE=Release

#       - name: Build project
#         run: cmake --build .

#       - name: Run tests
#         run: ctest --output-on-failure

#       - name: Check existing tags
#         id: check_tags
#         run: |
#           if git tag -l | grep -q "${{ github.run_number }}"; then
#             echo "Tag already exists. Skipping release creation."
#             echo "::set-output name=release_exists::true"
#           else
#             echo "::set-output name=release_exists::false"
#           fi

#       - name: Create Release
#         id: create_release
#         if: steps.check_tags.outputs.release_exists == 'false'
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.run_number }}-${{ github.sha }}
#           release_name: Release ${{ github.run_number }}
#           draft: false
#           prerelease: false

#       - name: Upload Release Asset
#         id: upload-release-asset
#         if: steps.check_tags.outputs.release_exists == 'false'
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./MyExecutable   # Ensure this path is correct!
#           asset_name: MyExecutable       
#           asset_content_type: application/octet-stream  






# name: 'C++ CI'

# on:
#   push:
#     branches:
#       - main
#       - feature/github_actions

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write  # Необходимое разрешение для создания релиза

#     steps:
#       # Шаг 1: Проверка исходного кода
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           submodules: true

#       # Шаг 2: Установка зависимостей (например, Boost)
#       - name: Install dependencies
#         run: sudo apt-get update && sudo apt-get install libboost-test-dev cmake g++ -y

#       # Шаг 3: Генерация файлов сборки с помощью CMake
#       - name: Configure CMake
#         run: cmake . -DCMAKE_BUILD_TYPE=Release

#       # Шаг 4: Сборка проекта
#       - name: Build project
#         run: cmake --build .

#       # Шаг 5: Запуск тестов (если у вас есть тесты)
#       - name: Run tests
#         run: ctest --output-on-failure

#       # Шаг 6: Создание релиза на GitHub (если необходимо)
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.run_number }}   # Используйте номер сборки как тег
#           release_name: Release ${{ github.run_number }}
#           draft: false
#           prerelease: false

#       # Шаг 7: Загрузка артефактов релиза (например, исполняемый файл)
#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./MyExecutable   # Убедитесь, что путь правильный к вашему исполняемому файлу!
#           asset_name: MyExecutable       # Имя артефакта в релизе
#           asset_content_type: application/octet-stream  # Тип контента для исполняемого файла




name: 'C++ CI'

on: 
  push:
    branches:
      - main

jobs:
  build_macos:
    runs-on: macos-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_INSTALL_PREFIX=`pwd`/install
    - run: cmake --build . --target install # Install first
    - run: cpack -G ZIP # Explicitly specify ZIP generator
    - name: Run Tests
      run: |
        ctest --output-on-failure || exit 1   
    - name: Create Release (MacOS)
      id: create_release_macos
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }} (MacOS)
        draft: false
        prerelease: false
    - name: Upload Release Asset (MacOS)
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
        asset_path: ./lab6-0.0.${{ github.run_number }}-Darwin.zip #Path changed
        asset_name: lab6-0.0.${{ github.run_number }}-Darwin.zip
        asset_content_type: application/zip

  
  build_ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target package
      - name: List files (ubuntu)
        run: ls
      - name: Create Release (ubuntu)
        id: create_release_ubuntu
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ubuntu${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (ubuntu)
          draft: false
          prerelease: false 
      - name: Upload Release Asset (ubuntu)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_ubuntu.outputs.upload_url }}
          asset_path: ./lab6-0.0.${{ github.run_number }}-Linux.zip
          asset_name: lab6-0.0.${{ github.run_number }}-Linux.zip
          asset_content_type: application/zip


